{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","onUserSelection","onCompletedChange","userId","inputValue","onTodosFilter","selectValue","onSelectValueChange","className","length","placeholder","type","value","onChange","name","id","map","todo","key","classNames","completed","checked","readOnly","title","onClick","API_URL","USERS_URL","getTodos","a","fetch","response","json","result","data","filter","CurrentUser","onSelectedUserClearance","useState","user","setUser","useEffect","todosAPI","then","userFromServer","email","phone","App","setTodos","selectedUserId","setSelcetedUserId","setFilterValue","setSelectValue","filteredTodos","setFilteredTodos","res","todosToRender","todoId","event","target","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7fdf8804.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\nexport const TodoList = ({\n  todos,\n  onUserSelection,\n  onCompletedChange,\n  userId,\n  inputValue,\n  onTodosFilter,\n  selectValue,\n  onSelectValueChange,\n}) => (\n  <div className=\"TodoList\">\n    <h2>{`Todos: ${todos.length}`}</h2>\n\n    <div>\n      <input\n        placeholder=\"Search todos\"\n        type=\"text\"\n        value={inputValue}\n        onChange={onTodosFilter}\n      />\n\n      <select\n        name=\"\"\n        id=\"\"\n        value={selectValue}\n        onChange={onSelectValueChange}\n      >\n        <option value=\"all\">\n          All\n        </option>\n        <option value=\"active\">\n          Active\n        </option>\n        <option value=\"completed\">\n          Completed\n        </option>\n      </select>\n    </div>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames('TodoList__item', {\n              'TodoList__item--checked': todo.completed,\n              'TodoList__item--unchecked': !todo.completed,\n            })}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onChange={() => {\n                  onCompletedChange(todo.id);\n                }}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              className={classNames('TodoList__user-button', 'button', {\n                'TodoList__user-button--selected': todo.userId === userId,\n              })}\n              type=\"button\"\n              onClick={() => {\n                onUserSelection(todo.userId);\n              }}\n            >\n              {`User #${todo.userId}`}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    title: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired,\n  }).isRequired).isRequired,\n  onUserSelection: PropTypes.func.isRequired,\n  onCompletedChange: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n  inputValue: PropTypes.string.isRequired,\n  onTodosFilter: PropTypes.func.isRequired,\n  selectValue: PropTypes.string.isRequired,\n  onSelectValueChange: PropTypes.func.isRequired,\n};\n","const API_URL = `https://mate-api.herokuapp.com/todos`;\nconst USERS_URL = `https://mate-api.herokuapp.com/users/`;\n\nexport async function getTodos() {\n  const response = await fetch(API_URL);\n\n  const result = await response.json();\n\n  return result.data.filter(todo => todo.userId);\n}\n\nexport async function getUsers(userId) {\n  const response = await fetch(`${USERS_URL}/${userId}`);\n\n  const result = await response.json();\n\n  return result.data;\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport * as todosAPI from '../../api/api';\n\nexport const CurrentUser = ({ userId, onSelectedUserClearance }) => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    todosAPI.getUsers(userId).then(userFromServer => setUser(userFromServer));\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      <h2 className=\"CurrentUser__title\">\n        <span>\n          {`Selected user: ${userId}`}\n        </span>\n      </h2>\n\n      {user && (\n        <div className=\"CurrentUser__container\">\n          <h3 className=\"CurrentUser__name\">\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            className=\"button  CurrentUser__clear\"\n            onClick={() => {\n              onSelectedUserClearance();\n            }}\n          >\n            Clear current user\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  onSelectedUserClearance: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport * as todosAPI from './api/api';\n\nconst App = () => {\n  const [todos, setTodos] = useState([]);\n  const [selectedUserId, setSelcetedUserId] = useState(0);\n  const [inputValue, setFilterValue] = useState('');\n  const [selectValue, setSelectValue] = useState('');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n    todosAPI.getTodos().then(res => setTodos(res));\n    todosAPI.getTodos().then(res => setFilteredTodos(res));\n  }, []);\n\n  const handleUserSelection = (userId) => {\n    setSelcetedUserId(userId);\n  };\n\n  const handleSelectedUserClearance = () => {\n    setSelcetedUserId(0);\n  };\n\n  const handleCompletedChange = (todoId) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === todoId) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return { ...todo };\n    }));\n  };\n\n  const handleTodosFilter = (event) => {\n    const { value } = event.target;\n\n    setFilterValue(value);\n\n    setTodos(filteredTodos.filter(todo => todo.title.toLowerCase()\n      .includes(value.toLowerCase())));\n  };\n\n  let todosToRender = todos;\n\n  if (selectValue === 'active') {\n    todosToRender = todos.filter(todo => todo.completed === false);\n  }\n\n  if (selectValue === 'completed') {\n    todosToRender = todos.filter(todo => todo.completed === true);\n  }\n\n  const handleSelectValueChange = (event) => {\n    const { value } = event.target;\n\n    setSelectValue(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          userId={selectedUserId}\n          onCompletedChange={handleCompletedChange}\n          onUserSelection={handleUserSelection}\n          todos={todosToRender}\n          inputValue={inputValue}\n          onTodosFilter={handleTodosFilter}\n          selectValue={selectValue}\n          onSelectValueChange={handleSelectValueChange}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              onSelectedUserClearance={handleSelectedUserClearance}\n              userId={selectedUserId}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}